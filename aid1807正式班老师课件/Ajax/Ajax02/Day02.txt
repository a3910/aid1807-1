AJAX:
	1.AJAX核心对象 - XMLHttpRequest
		function getXhr(){
			if(window.XMLHttpRequest)
				return new XMLHttpRequest();
			else
				return new ActiveXObject("Microsoft.XMLHTTP");
		}
	2.xhr的成员
		1.方法 - open()
			目的：创建请求
			语法：open(method,url,async)
		2.属性 - readyState
			目的：表示xhr与服务器之间的交互状态
			取值：0-4
				4：响应完成
		3.属性 - status
			目的：表示服务器自身的响应状态码
			取值：标准的HTTP响应码
				200：服务器正常响应所有内容
		4.属性 - responseText
			目的：响应内容
		5.事件 - onreadystatechange
			目的：监控xhr的请求状态
			取值：函数
				只有当readyState的值为4并且status的值为200的时候才正常的接收数据
		6.方法 - send()
			目的：发送请求
			语法：send(body)
				get : send(null)
				post : send("name=value&name=value")
		7.方法 - setRequestHeader()
			目的：设置请求消息头
			语法：setRequestHeader(name,value)
				xhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded');

	3.AJAX操作步骤
		1.GET请求
			1.创建/获取 xhr
			2.创建请求
			3.设置回调函数
			4.发送请求

			注意：如果有请求提交数据的话需要在 url 的后面拼查询字符串
		2.POST请求
			1.创建/获取 xhr
			2.创建请求
			3.设置回调函数
			4.设置 Content-Type 的请求消息头
			5.发送请求

			注意：如果有请求提交数据的话需要在 send() 中传递数据
========================================================
1.JSON
	1.JS 对象
		语法：
			1.通过一对 {} 表示一个对象
			2.在 {} 中允许通过 key:value 的形式来表示属性
			3.多对的属性和值之间使用 , 隔开
			var obj = {
				name:'MrWang',
				age:37,
				gender:'Unknown'
			}
	2.什么是JSON
		JavaScript Object Notation	
											表现形式
		按照JS对象的格式所构建出来的字符串就是JSON串

		在ajax中，允许将复杂格式的响应数据(如列表等)构建成JSON格式的字符串再进行响应输出
	3.JSON的表现
		1.JSON表示单个对象
			1.使用 {} 表示单个对象
			2.在{}中使用key:value的格式表示数据
			3.多对属性和值之间使用 , 隔开
			4.key必须使用""引起来
			5.value如果是字符串的话，也需要用""引起来

			ex:
				var obj = {
					"name":"MrWang",
					"age":37,
					"gender":"Unknown"
				}

				var str = '{"name":"MrWang","age":37,"gender":"Unknown"}';
		2.JSON表示多个对象
			1.使用[](数组)来表示多个对象
			2.数组中允许包含多个JSON对象 或 字符串
				1.使用JSON数组来表示若干字符串
					var arr = ["王老师","王夫人","王小超"];
					var str = '["王老师","王夫人","王小超"]';
				2.使用JSON数组来表示若干对象
					var arr = [
						{
							"name":"王老师",
							"age":37,
							"gender":"男"
						},
						{
							"name":"王夫人",
							"age":15,
							"gender":"男"
						}
					];

					var str = '[
						{
							"name":"王老师",
							"age":37,
							"gender":"男"
						},
						{
							"name":"王夫人",
							"age":15,
							"gender":"男"
						}
					]';
	4.使用jq的each()迭代数组
		1. $.each();
			语法：
				$.each(arr,function(index,obj){
					//index : 遍历出来的元素的下标
					//obj : 表示遍历出来的元素
				});
		2. $obj.each();
			语法：
				$obj.each(function(index,obj){
					//index : 遍历出来的元素的下标
					//obj : 表示遍历出来的元素
				});

				该函数用于循环遍历 $obj 元素
2.后台处理JSON
	在后台查询数据时，需要先将数据转换为JSON格式的字符串，再响应给客户端。到了前端后再将字符串转换为JS对象再进行解析。

	1.步骤
		1.后台先获取数据
			数据类型为:
				1.元组
				2.列表
				3.字典
		2.在后台将数据转换为符合JSON格式的字符串
		3.在后台将JSON格式字符串进行响应
		4.在前端将JSON格式的字符串解析成JS对象

	2.Python中的JSON处理
		使用 Python 中的 json 类可以完成转换
		import json
		jsonStr = json.dumps(元组|列表|字典)
		return jsonStr
	3.前端中的JSON处理
		通过以下方式，将JSON的串转换为JS对象或数组
		在JS中：js对象/数组 = JSON.parse(JSON串)









1.F() 和 Q()
	1.F()
		执行操作中获取对应列的数值
		Author.objects.all().update(age=F('age')+10)
	2.Q()
		执行 或 条件时使用
		Author.objects.filter(Q(id=1)|Q(age__gt=30))
2.原生SQL执行
	1.查询
		raw()
	2.增删改
		with connnect.cursor() as cursor:
			sql=""
			cursor.execute(sql)

3.后台管理
	0.后台配置
		1.创建超级用户 
			./manage.py createsuperuser
		2.后台登录地址
			http://localhost:8000/admin
	1.基本管理
		1.在应用中 admin.py 中注册要管理的数据
			admin.site.register(Entry)
		2.通过Models的设置定义其展现形式
			1.列选项中 - verbose_name
				name = models.CharField(max_length=30,verbose_name="姓名")
			2.重写类的 __str__方法，定义列表页中的展示信息
			3.通过内部类 Meta 来定义其展现形式
				1.db_table
					指定该类所映射到的表名
				2.verbose_name
					定义实体类在admin中显示的名字(单数)
				3.verbose_name_plural
					定义实体类在admin中显示的名字(复数)
				4.ordering
					定义数据在后台列表页中的排序规则
	2.高级管理
		1.声明高级管理类
			1.定义 EntryAdmin 类，继承自 admin.ModelAdmin
			2.注册高级管理类
				admin.site.register(Entry,EntryAdmin)
		2.通过属性定义高级管理
			1.list_display
			2.list_display_links
			3.list_editable
			4.search_fields
			5.list_filter
			6.date_hierarchy
			7.fields
			8.fieldsets
4.关系映射
	1.一对一
		通过 models.OneToOneField()
		class Wife(models.Model):
			author = models.OneToOneField(Author)

		Wife 中，通过author属性来表示对应的 实体对象
		Author 中，通过 wife 属性来表示对应的 实体对象
	2.一对多
		通过 models.ForeignKey(Entry) 来实现
		Publisher 与 Book
		class Book(models.Model):
			publisher = models.ForeignKey(Publisher)

		在 Book 中，通过publisher属性获取对应的 Publisher 实体
		在Publisher 中，通过 book_set 来表示对 Book 的实体查询对象


================================================
1.商品类型 - GoodsType
	1.title - 商品类型的名称
	2.desc - 描述
	3.picture - 商品图片
2.商品 - Goods
	1.title - 商品名称
	2.price - 商品价格
	3.spec - 商品规格
	4.picture - 商品图片
	5.goodsType - 该商品对应的商品类型
	6.isActive - 是否上架(默认为True)
3.创建数据库 - FruitDay
4.定义Goods的高级管理
	1.增加搜索字段：允许按照 商品名称 进行搜索
	2.增加过滤器 ：允许按照 商品类型 进行过滤筛选
=======================================================
1.ORM
	1.映射关系
		1.一对一映射
		2.一对多映射
		3.多对多映射
			1.语法
				在关联的两个类的任意一个类中，增加：
				属性 = models.ManyToManyField(Entry)
				ex: Author 与 Book 可以是多对多关联关系
					1位Author可以出版多本Book
					1本Book可以由多位Author联合编写
				
					class Author(models.Model)
						.... ....

					class Book(models.Model):
						... ...
						authors = models.ManyToManyField(Author)
					
					正向引用：
						在 Book 中通过 authors 来表示对应的所有的书籍的查询
					反向引用：
						在 Author 中通过 book_set 来表示对应的所有的作者们的查询

				练习：创建 Author 与 Publisher之间的关系
					1个Publisher可以有多名签约Author
					1名Author也可以有多个签约Publisher

				查询：通过 Book 查询 Author 以及 Author 查询 Book
				class Author(models.Model)
					.... ....

				class Book(models.Model):
					... ...
					authors = models.ManyToManyField(Author)

				正向查询：通过 Book 查询 Author
					authors = book.authors.all()
				反向查询：通过 Author查询Book
					books = author.book_set.all()
	2.自定义查询对象 - objects
		Author.objects.all()
		Author.objects.filter()
		Author.objects.authors_count()

		objects 属性的类型为 models.Manager

		1.声明 EntryManager 类，继承自 models.Manager
			允许在 EntryManager中增加自定义函数

			class EntryManager(models.Manager):
				def 函数名(self,自定义参数):
					.... ....
					return ...
		2.使用EntryManager对象覆盖Models类中原有的objects
			class Entry(models.Model):
				objects = EntryManager()

		练习：
			1.在 Author 中为 objects 增加自定义方法
				查询 Author 中年龄小于指定年龄的人的信息
			2.在 Book 中为 objects 增加自定义方法
				查询书名中包含指定关键字的书籍的数量
2.HttpRequest - 请求
	1.什么是HttpRequest
		HttpRequest，就是对请求对象的封装，里面封装的是请求过程中的所有信息。
		在Django中HttpRequest被封装成request对象并封装到视图处理函数中，在调用视图时自动传入
	2.HttpRequest中的主要内容
		1.request.scheme : 请求协议
		2.request.body : 请求主体
		3.request.path : 请求路径
		4.request.get_full_path() : 请求完整的请求路径
		5.request.get_host() : 请求的主机地址 / 域名
		6.request.method 
		7.request.GET : 封装了get请求方式所提交的数据
		8.request.POST : 封装了post请求方式所提交的数据
		9.request.COOKIES : 封装了 cookies 中的所有数据
		10.request.META : 封装了请求的元数据
			request.META.HTTP_REFERER : 封装了请求的源地址
	3.获取请求提交的数据
		1.get 请求
			1.获取数据
				request.GET['名称']
				request.GET.get('名称')
				request.GET.getlist('名称')
			2.使用get方式提交数据的场合
				1.表单中 method 为get 的时候
				2.地址栏上拼查询字符串的时候
					http://localhost:8000/01-request/?id=1&name=xxx

				注意：
					url(r'^01-request/(\d{4})/(\d{1,})',xxx)
					http://localhost:8000/01-request/2018/10

					以上方式提交的数据不能使用request.GET来获取，因为以上的方式是 Django 标准而并非 HTTP 标准
			3.练习：
				http://localhost:8000/02-request/?year=2018&month=11&day=19
				接收请求中的数据并打印在终端上：
				年：2018
				月：11
				日：19
		2.post 请求
			1.获取数据
				request.POST['名称']
				request.POST.get('名称')
				request.POST.getlist('名称')
			2.使用POST方式提交数据的场合
				1.使用表单提交时可以使用post
			3.CSRF verification failed (403)
				CSRF : Cross-Site Request Forgery
							 跨    站点 请求    伪装  
				
				解决方案：
					1.取消csrf的验证
						删除 settings.py中 MIDDLEWARE 中的 CsrfViewMiddleware 中间件
					2.在处理函数上增加装饰器
						@csrf_protect
					3.可以在 表单中的 第一行增加:{% csrf_token %}
3.使用 forms 模块处理表单
	1.forms模块的作用
		通过forms模块，允许将表单与class结合(表单与实体类结合)，允许通过class生成表单
	2.使用forms模块
		1.在应用中创建 forms.py 文件
		2.导入forms模块
			from django import forms
		3.创建class，一个class对应生成一个表单
			class ClassName(forms.Form):
				pass
		4.创建属性
			一个属性对应到表单中生成一个控件
	3.在模板中解析 form 对象
		1.注意
			在模板中，需要：
				1.自定义 <form></form>
				2.自定义 提交按钮
		2.处理方法
			1.在 views 中创建 form 的对象并发送到模板上
				form = RemarkForm()
				return render(request,'xxx.html',locals())
			2.在模板中进行解析
				1.手动解析
					{% for field in form %}
						{{field}} :
							表示的就是form对象中的一个独立属性
							表示的也就是一个独立的控件
						{{field.label}}:
							表示的是控件中的label的值
					{% endfor %}
				2.自动解析
					1.{{form.as_p}}
						将form对象中的每个属性使用p标记包裹起来再显示
					2.{{form.as_ul}}
						将form对象中的每个属性使用li标记包裹起来，再显示
						注意：必须手动提供<ol> 或 <ul>
					3.{{form.as_table}}
						将form对象中的每个属性用tr标记包裹起来，再显示
						注意：必须手动提供<table>
















['COOKIES', 'FILES', 'GET', 'META', 'POST', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_encoding', '_get_post', '_get_raw_host', '_get_scheme', '_initialize_handlers', '_load_post_and_files', '_mark_post_parse_error', '_messages', '_post_parse_error', '_read_started', '_set_post', '_stream', '_upload_handlers', 'body', 'build_absolute_uri', 'close', 'content_params', 'content_type', 'csrf_processing_done', 'encoding', 'environ', 'get_full_path', 'get_host', 'get_port', 'get_raw_uri', 'get_signed_cookie', 'is_ajax', 'is_secure', 'method', 'parse_file_upload', 'path', 'path_info', 'read', 'readline', 'readlines', 'resolver_match', 'scheme', 'session', 'upload_handlers', 'user', 'xreadlines']

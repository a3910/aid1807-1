1.模板
	1.继承
		父模板：
			{% block 名称 %}
			{% endblock %}
		子模板：
			1.指定继承自哪个模板
				{% extends '父模板名称' %}
			2.编写要覆盖的内容
				{% block 名称 %}
				{% endblock %}
	2.url name 属性 - 反向解析
		url(regex,views,name='alias')
		1.模板中的反向解析
			{% url 'alias' '参数1' '参数2' %}
		2.视图中反向解析
			url=reverse('alias',args=('参数1','参数2'))
2.模型
	模型类(实体类)是要放在各个应用下的 models.py 中

	1.同步回数据库
		1. ./manage.py makemigrations
			将models.py中的内容生成中间文件
		2. ./manage.py migrate
			将中间文件映射回数据库
	2.创建模型
		class ClassName(models.Model):
			属性名 = models.字段类型(字段选项)

		字段类型：
			1.CharField()
			2.EmailField()
			3.URLField()
			4.ImageField()
			5.IntegerField()
			6.FloatField()
			7.DecimalField()
			8.BooleanField()
			9.DateField()
			10.DateTimeField()
			11.TextField()

		字段选项：
			1.default
			2.null ：True 或 False
			3.db_column :指定列名
			4.db_index : True 或 False
=====================================================
1.模型
	1.相关指令
		1.版本切换指令
			./manage.py migrate 应用名称 版本号
		2.通过数据库自动导出models类
			./manage.py inspectdb > 文件名.py		

2.模型中的CRUD
	1.增加数据
		1.Entry.objects.create(属性=值,属性=值)
			返回值：
				插入成功：则返回创建好的实体对象
				插入失败：则返回 None
		2.创建一个Entry对象，并通过save()进行保存
			obj = Entry(属性=值,属性=值)
			obj.属性 = 值
			obj.save()
			无返回值，保存成功后，obj会被重新赋值
		3.通过字典创建Entry对象，并通过save()进行保存
			dic = {
				'属性1':'值1',
				'属性2':'值2',
			}

			obj = Entry(**dic)
			obj.save()
	2.查询数据(重难点)
		通过 Entry.objects 调用查询接口函数
		Entry.objects.all()
		Entry.objects 提供了对该实体的所有的数据的查询
		所有的接口函数，都可以通过一个 query 属性来得到所对应的sql语句
			Entry.objects.all().query

		1.获取所有查询结果
			方法：all()
			用法：Entry.objects.all()
			返回：QuerySet(查询结果集，本质是一个封装了若干对象的列表)
		2.查询返回指定列
			方法: values() | values('列名1','列名2')
			作用：查询表中数据的部分列，封装到字典中，再封装到QuerySet中
			返回：QuerySet(查询结果集，本质是一个封装了若干字典的列表)
		3.查询返回指定列
			方法：values_list()
			作用：将数据封装到元组中再封装到列表中
		4.排序方法
			方法：order_by()
			语法：Entry.objects.order_by('列1','-列2')
				默认是升序排序，列名前加-，则表示降序排序
		5.查询只返回一条数据
			方法：get(条件)
			注意：
				该方法只适用于只能查询出一条结果的场合
				如果查询多于一条数据或没查询出结果都会抛出异常
			返回：单个实体对象
		6.根据条件查询部分行
			方法：filter(条件)
			返回：QuerySet
			ex:
				1.查询 Author 实体中 id=1 的信息
					authors=Author.objects.filter(id=1)
	
			非等值条件需要使用Field Lookups（查询谓词）
			语法：Entry.objects.filter(属性__查询谓词=值)
			注意：
				1.每个查询谓词都是一个独立的功能条件
					__exact : 等值条件判断
					__gt : 大于条件判断
					__year : 得到日期中的年份再进行进一步判断
					__contains : 模糊查询 '%xxx%'
					__range : 模糊查询 between and
					... ...
				2.所有支持条件查询的位置处都支持查询谓词
					filter() , get() , exclude()
			练习：
				1.查询出age小于等于30的Author的信息(双下划线 )
					Author.objects.filter(age__lte=30)
				2.查询出所有姓"王"的Author的信息
					Author.objects.filter(name__startswith='王')
				3.查询出所有email中包含"wang"的Author的信息
					Author.objects.filter(name__contains('王'))
				4.查询出所有publicate_date的时间是2015年的 Book的信息
					Book.objects.filter(publicate_date__year=2015)
				5.查询出所有publicate_date的时间是2015年以后的 Book的信息
					Book.objects.filter(publicate_date__year__gte=2015)
		7.对条件取反
			方法:exclude(条件)
			ex:
				Author.objects.exclude(id=1)
				select * from index_author where not(id=1)
		8.聚合查询(不带分组)
			方法：aggregate(列名=聚合函数('列'))
			ex:
				Author.objects.aggregate(sumAge=Sum('age'))
			聚合函数：
				1.Avg() : 平均值
				2.Count() : 数量
				3.Sum() : 求和
				4.Min() : 求最小值
				5.Max() : 求最大值
		9.聚合查询(带分组)
			方法:annotate(名=聚合函数('列'))
			ex:
				按 id 分组 查询平均年龄
				Author.objects.values('id').annotate(avgAge=Avg('age')).all()
			
			集结 where,分组查询,having 于一体的查询接口
			Author.objects
			.filter(id__gte=3)  # where 子句  
			.values('isActive') # group by 子句
			.annotate(avgAge=Avg('age')) # 查询聚合函数
			.filter(avgAge__gte=30) # having 子句
	3.修改数据
		1.修改单个实体
			1.查
				通过 get() 查询出要修改的实体
			2.改
				通过实体对象的属性赋值
			3.保存
				通过实体对象save()方法保存数据回数据库
		2.批量修改数据
			调用QuerySet的update(   属性=值,属性=值)实现批量修改
	4.删除数据
		调用实体对象/查询结果集的 delete() 完成删除
		1.删除单个对象
			au=Author.objects.get(id=1)
			au.delete()
		2.批量删除
			auList = Author.objects.all()
			auList.delete()

	
	作业：




SQL 语句：
SELECT `index_author`.`id`, `index_author`.`name`, `index_author`.`age`, `index_author`.`email`, `index_author`.`isActive` FROM `index_author`

all()查询结果：
<QuerySet [<Author:'MrWang'>, <Author:'王老师'>, <Author:'魏老<Author:'哲学吕'>]>

values()查询结果：
<QuerySet 
[
	{'age': 30, 'name': 'MrWang', 'isActive': True, 'id': 1, 'email': 'wangwc@163.com'}, 
	{'age': 35, 'name': '王老师'isActive': True, 'id': 2, 'email': 'laowang@163.com'}, 
	{'age': 35, 'name': '魏老师', 'isActive': True, 'id': 3, 'email': 'lai@163.com'}, 
	{'age': 28, 'name': '哲学吕', 'isActive': True, ': 4, 'email': 'laolv@163.com'}
	]
>



1.增加数据
	1.Entry.objects.create(属性=值,...)
		返回值：创建好的实体对象
	2.创建实体对象，通过 save() 完成保存
		obj = Entry(...)
		obj.save()
	3.通过字典创建实体对象，通过save()完成保存
		dic = {
			'属性':'值',
			... ...
		}

		obj = Entry(**dic)
		obj.save()
2.查询数据
	所有的查询都要基于 Entry.objects
	1.all()
		返回:QuerySet : [<Entry>,<Entry>]
	2.values()
		查询部分列数据
		返回:QuerySet : [{'属性':'值'},{'属性':'值'},]
	3.values_list()
		查询部分列数据
		返回:QuerySet : [('值1','值2'),('值1','值2')]
	4.get(条件)
		查询只能返回一条数据
		查询不返回数据 或 返回多条数据的话都会抛异常
	5.order_by()
		排序
		ex:
			Entry.objects.order_by('id','-age')
	6.filter(条件)
		1.等值
			Entry.objects.filter(id=10)
		2.不等值条件查询
			使用 Field Lookups (查询谓词) 构建不等值条件
			__exact : =
			__gt : >
			__gte : >=
			__lt : <
			__lte : <=
			__contains : like '%..%'
			__startswith : like '..%'
			__endswith : like '%..'
			__in : in
			__range : between ... and ...
			__year : 获取时间日期字段中的year部分
				publicate_date__year__gt=2015
			... ...
	7.exclude(条件)
	8.aggregate()
		不带分组聚合实现，整表聚合
		result=Entry.objects.aggregate(名=聚合函数('列'))
		result 类型为字典
	9.annotate()
		带分组聚合
		Entry.objects.values('分组列1').annotate(名=聚合函数('列'))

		Entry.objects
		.filter(条件)  # where 子句
		.values('列')  # 分组列 - group by 后的内容
		.annotate(聚合函数) # 求聚合
		.filter(条件)  # having 子句
		.order_by('排序列') # order by 子句
3.修改
	1.单条数据修改
		1.查
		2.改
		3.保存
	2.多条数据修改
		通过QuerySet提供的.update(属性=值,...)实现批量修改
4.删除
	delete()

==========================================================
1.模型
	1.F查询 和 Q查询
		1.F()
			作用：在执行过程中获取某列的值
			语法：
				from django.db.models import F
				F('列名') ：得到对应列的值

				Author.objects.all().update(age=F('age')+10)
		2.Q()
			作用：在查询条件中可以完成 or 操作
				from django.db.models import Q
				Q(条件1)|Q(条件2)
				
				查询 id大于等于3 或 年龄 < 40 的人的信息
				Author.objects.filter(Q(id__gte=3)|Q(age__lt=40))
	2.原生的数据库操作方法
		1.查询
			函数：raw(sql语句)
			语法：Entry.objects.raw(sql)
			返回：QuerySet
		2.增删改
			from django.db import connection

			def doSQL(request):
				with connection.curso() as cursor:
					sql = "update index_author set age=age+10"
					cursor.execute(sql)
					return ''
2.使用后台管理 Models
	1.后台的配置
		登录地址 ：http://localhost:8000/admin

		创建后台管理员(超级用户):
			./manage.py createsuperuser
			Username : 输入用户名，默认为系统账户名
			Email Address : 电子邮件
			Password : 密码
			Password(again) : 确认密码
	2.Models 的基本管理
		1.在应用中的 admin.py 中注册要管理的实体类
			1.admin.py
				作用：注册要管理的Models类，只有注册后才能管理
			2.注册Models
				from .models import *
				admin.site.register(Entry)
		2.修改Models提升可读性
			1.重写每个实体类中的 __str__() 
				后台显示的将以 __str__ 的返回值为准
			2.为实体类中的属性们增加字段选项 - verbose_name
				用于修改显示的字段名
		3.通过Models类的内部类Meta定义其展现形式
			class Author(models.Model):
				... ...
				class Meta:
					1.db_table
						指定该实体类映射到的表的名称
						(该属性设置完成后需要同步回数据库)
					2.verbose_name
						定义类在 admin 中显示的名字(单数)
					3.verbose_name_plural
						定义类在 admin 中显示的名字(复数)
					4.ordering
						指定数据在后台管理中显示的排序方式
						取值为一个列表，指定排序列，默认升序，降序使用-
	3.Models 的高级管理
		1.在 admin.py 中创建高级管理类并注册
			1.定义 EntryAdmin 类 ，继承自 admin.ModelAdmin
				class AuthorAdmin(admin.ModelAdmin):
					pass
			2.注册高级管理类
				admin.site.register(Entry,EntryAdmin)
				ex:
					admin.site.register(Author,AuthorAdmin)
		2.允许在 EntryAdmin 中增加的属性
			1.list_display
				作用：定义在列表页上显示的字段们
				取值：由属性名组成的元组或列表
			2.list_display_links
				作用：定义在列表页上也能够链接到详情页的字段们
				取值：同上
				注意：取值必须要出现在list_display中
			3.list_editable
				作用：定义在列表页上就能够修改的字段们
				取值：同上
				注意：取值必须要出现在list_display中但不能出现在list_display_links中
			4.search_fields
				作用：定义搜索栏中允许搜索的字段值们
				取值：同上
			5.list_filter
				作用：列表页的右侧在增加过滤器实现快速筛选
				取值：同上
			6.date_hierarchy
				作用：列表页的顶部增加一个时间选择器，
				取值：属性必须是 DateField 或 DateTimeField 的列
			7.fields
				作用：在详情页面中，指定要显示哪些字段并按照什么样的顺序显示
				取值：由属性名组成的元组或列表
			8.fieldsets
				作用：在详情页面中对字段们进行分组显示
				注意：fieldset 与 fields 不能共存
				取值：
					fieldsets = (
						#分组1
						('分组名称',{
							'fields':('属性1','属性2'),
							'classes':('collapse',)
						}),
						#分组2
						()
					)

			练习：完成Publisher的高级管理功能
				1.在列表页上要显示name,address,city属性
				2.address 和 city 是可以编辑的
				3.右侧增加过滤器，允许按照city过滤筛选
				4.顶部增加一个搜索框允许按照name,website进行筛选
				5.详情页中分组显示
					1.name,address,city 为 "基本选项" 分组
					2.country,website为 "高级选项" 分组并可折叠
3.关系映射
	1.一对一映射
		1.语法
			在关联的两个类中的任何一个类都可以增加对另一个类的引用

			属性 = models.OneToOneField(Entry)

			ex:
				class Author(models.Model):
					.... ....

				class Wife(models.Model):
					.... ....
					#增加对Author的一对一引用
					author = models.OneToOneField(Author)
			
			在数据库中：
				会生成一个外键(author_id)列在 wife 表中，会引用在 author 表的主键
			在 Author 中：
				增加一个隐式属性 - wife，来表示author所对应的wife(其实就是反向引用属性)
		2.查询
			1.正向查询 ：通过 Wife 找 Author
				特点：通过自定义的关联属性查找对应实体
				wife = Wife.objects.get(id=1)
				author = wife.author
			2.反向查询 ：通过 Author 找 Wife
				特点：通过反向引用属性查找对应的实体
				author = Author.objects.get(id=1)
				wife = author.wife
			练习：
				1.通过 姓名为 "魏夫人" 的娘子信息，查找对应的author，并打印在终端上
				2.通过 姓名为 "王老师" 的作者信息，查找对应的 ，wife 并打印在终端上
	
	2.一对多映射
		1.语法
			在"多"表中增加对"一"表的外键引用
			在"多"实体中增加对"一"实体的引用
			在 "多" 实体中增加：
				属性 = models.ForeignKey(Entry)

			ex: Book(多) 和 Publisher(一)
			class Book(models.Model)
				... ...
				publisher = models.ForeignKey(Publisher)
			
			数据库中体现：
				Book 表中 增加一个外键列 publisher_id ，引用自 Publisher 表中的主键
			在实体类中的：
				1.Book 中会有一个 publisher 属性 来表示对应的 Publisher 的对象
				2.Publisher 中会有一个隐式属性 - book_set,用来表示该 publisher 对应的所有的 Book 对象的查询
	3.多对多映射







	任务：
		根据 购物网站的首页分析
		1.商品类别 - GoodsType
			类别图片
			... ...
		2.商品信息 - Goods
			商品名称
			商品价格
			商品规格
			商品图片
			... ...


Author.objects.all().update(age=age+10) 错误
#查询Author中id大于10 或 年龄小于35的人的信息
Author.objects.filter(id__gt=10 , age__lt=35)








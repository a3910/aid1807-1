Day02回顾
1、关于正则解析
  1、分组(想要抓取什么内容就加小括号())
  2、正则方法
    p = re.compile('',re.S)
    r_list = p.findall(html)
      [(),(),(),()]
  3、贪婪匹配： .*
  4、非贪婪匹配 ： .*?    re.S
2、抓取步骤
  1、找URL
  2、写正则表达式
  3、定义类,写程序框架
  4、补全代码
3、存入csv文件
  import csv
  with open("test.csv","a",neline="",encoding="gb18030) as f:
      writer = csv.writer(f)
      writer.writerow([列表])
4、数据持久化存储
  1、存入MySQL数据库
    1、db = pymysql.connect("localhost",...,"库名",charset=..)
    2、cursor = db.cursor()
    3、cursor.execute('sql命令',[列表传参])
    4、db.commit()
    5、cursor.close()
    6、db.close()
  2、存入MongoDB数据库
    1、conn = pymongo.MongoClient("localhost",27017)
    2、db = conn.库名  |  db = conn["库名"]
    3、myset = db.集合名  | myset = db["集合名"]
    4、myset.insert({字典})
    终端操作
    >>>show dbs
    >>>use 库名
    >>>show collections
    >>>db.集合名.find().pretty()
    >>>db.集合名.count()
    >>>db.dropDatabase()
5、安装模块
  1、Anaconda Prompt : conda install 模块名
  2、Windows cmd     : python -m pip install 模块名
  3、Ubuntu          : sudo pip3 install 模块名
****************************************
Day03笔记
1、Cookie模拟登陆
  1、什么是cookie、session
    HTTP是一种无连接协议,客户端和服务器交互仅仅限于 请求/响应 过程,结束后断开,下一次请求时,服务器会认为是一个新的客户端,为了维护他们之间的连接,必须在一个地方保存客户端信息
    cookie ：通过在客户端记录的信息确定用户身份
    session：通过在服务端记录的信息确定用户身份
  2、案例 ：利用Cookie模拟登陆人人网
    1、一定要先登录成功1次,获取到cookie
2、requests模块
  1、get(url,params=params,headers=headers)
    params: 查询参数,字典,不用编码,也不用拼接URL
  2、响应对象res的属性
    1、encoding : 响应字符编码,res.encoding="utf-8"
    2、text     : 字符串
    3、content  : 字节流
    4、status_code : 响应码
    5、url      : 返回实际数据的URL
  3、非结构化数据存储
    html = res.content
    with open("XXX","wb") as f:
        f.write(html)
  4、post(url,data=data,headers=headers)
    1、data ：Form表单数据,字典,不用编码,不用转码
    2、有道翻译
      # 此处data为form表单数据
      res = requests.post(url,data=data,headers=headers)
      res.encoding = "utf-8"
      html = res.text
3、get()方法中不同参数
  1、代理IP(参数名: proxies)
    1、获取代理IP的网站
      西刺代理IP
      快代理
      全网代理
    2、普通代理
      1、格式 ：proxies={"协议":"协议://IP地址:端口号"}
        http://httpbin.org/get : 能够显示客户端的headers和IP
	proxies = {"HTTP":"http://61.152.248.147:80"}
    3、私密代理
      1、格式
        proxies = {"http":"http://用户名:密码@IP地址:端口号"}

	用户名 ：309435365
	密码   ：szayclhp
	IP地址 ：116.255.162.107
	端口号 ：16816
    4、链家二手房案例(MySQL数据库)
      见 ：05_链家tomysql.py
      1、找URL
        第1页：https://bj.lianjia.com/ershoufang/pg1/
	第2页：https://bj.lianjia.com/ershoufang/pg2/
      2、正则
        <div class="houseInfo">.*?data-el="region">(.*?)</a>.*?<div class="totalPrice">.*?<span>(.*?)</span>
      3、写代码
    5、链家二手房案例(MongoDB数据库)
      见 ：06_链家tomongo.py
      >>>show dbs
      >>>use 库名
      >>>show collections
      >>>db.集合名.find().pretty()
      >>>db.集合名.count()
  2、Web客户端验证(参数名：auth=(元组))
    1、auth = ("用户名","密码")
       auth = ("tarenacode","code_2013")
    2、案例 ：爬取code.tarena目录
      见 ：07_Web客户端验证.py
      1、步骤
        1、URL ：http://code.tarena.com.cn
	2、正则
	  <a href=".*?">(.*?)</a>
	3、写代码
  3、SSL证书认证(参数名：verify=True | False)
    1、verify = True ：默认,进行SSL证书认证
    2、verify = False：不做认证
4、urllib.request中Handler处理器
  1、定义
    自定义的urlopen()方法,因为模块自带的urlopen不支持代理等功能,通过Handler处理器自定义urlopen方法
  2、常用方法
    1、opener = build_opener(某种功能Handler处理器对象)
    2、opener.open(url)
  3、使用流程
    1、创建相关的Handler处理器对象
    2、创建自定义opener对象
    3、利用opener对象的open方法发请求获响应
  4、Handler处理器分类
    1、HTTPHandler() ：没有特殊功能
    2、ProxyHandler({普通代理})
       代理格式 ：{"":""}
    3、ProxyBasicAuthHandler(密码管理器对象)
    4、HTTPBasicAuthHandler(密码管理器对象)
  5、密码管理器用途
    1、私密代理
    2、Web客户端认证
    3、程序实现流程
      1、创建密码管理对象
        pwdmg = urllib.request.HTTPPasswordMgrWithDefaultRealm()
      2、把认证信息添加到对象里面去
	pwdmg.add_password(None,Webserver,user,password)
      3、创建Handler处理器对象
	proxy_handler = urllib.request.ProxyBasicAuthHandler(pwdmg)
      4、创建自定义opener对象
	opener = urllib.request.build_opener(proxy_handler)
      5、利用opener对象的open方法发请求获响应
        req = urllib.request.Request(url,headers=headers)
	res = opener.open(req)











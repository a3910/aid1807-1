day11回顾

函数式 functional programing
  偶合度
    可重入函数
    不可重入函数
高阶函数 
  map
  filter
  sorted

递归函数 recursion
  直接或间接调自身


闭包:
  




day12笔记
装饰器 decorator(专业提高篇)  
  什么是装饰器
    装饰器是一个函数,主要作用是用来包装另一个函数或类(后面才讲)
    包装的目的是在不改变原函数(或类名)的情况下改变被包装对象 的行为

函数装饰器
  是指装饰器是一个函数,传入的是一个函数,返回的是一个函数

  语法:
    def 装饰器函数名(参数):
        语句块
        return 函数对象

    @装饰器函数名<换行>
    def 函数名(形参列表):
        语句块
  原理:
    被装饰函数的变量(函数名)绑定装饰器函数调用后的返回的函数
  示例见:
    mydeco1.py
    mydeco2.py
    mydeco3.py
    mydeco4.py



函数的文档字符串:
  函数内第一次未赋值给任何变量的字符串是此函数的文档字符串
  语法:
    def 函数名(参数列表):
        '函数文档字符串'
        语句块
  说明:
    1. 文档字符串通常用来说明函数的功能和使用方法
    2. 在交互模式下,输入:
        >>> help(函数名) 可以查看函数的文档字符串
    3. 函数的文档字符串绑定在函数的__doc__属性上
  示例:
    def mysum(n):
        '''mysum 函数用来求
        1 + 2 + 3 + .... + n 的和
        '''
        return 100
    >>> help(mysum)

函数的 __doc__ 属性
   __doc__ 属性用于记录文档字符串


函数的 __name__ 属性
  __name__属性用于记录函数名

说明:
  以双下划线开头,以双下划线结尾的标识符通常代表python的特殊变量

函数定义的完整语法:
  [@装饰器名1]
  [@装饰器名2]
  [...]
  def 函数名(位置形参, *元组形参名, 命名关键字形参, **字典形参):
      '文档字符串'
      语句块


面试题:
  L = [1, 2, 3]
  # 缺省参数[] 在def语句执行时创建此列表，并一直被f函数所绑定
  def f(n=0, lst=[]):
      lst.append(n)
      print(lst)

  f(4, L)  # [1, 2, 3, 4]
  f(5, L)  # [1, 2, 3, 4, 5]
  f(100)   # [100]
  f(200)  # [100, 200] 打印结果是什么,为什么?


